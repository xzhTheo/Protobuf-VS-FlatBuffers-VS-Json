// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBSSCHEMA_FBS_H_
#define FLATBUFFERS_GENERATED_FBSSCHEMA_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {

struct grade;
struct gradeBuilder;

struct Message;
struct MessageBuilder;

struct grade FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef gradeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUBJECT = 4,
    VT_VALUE = 6
  };
  const flatbuffers::String *subject() const {
    return GetPointer<const flatbuffers::String *>(VT_SUBJECT);
  }
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SUBJECT) &&
           verifier.VerifyString(subject()) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct gradeBuilder {
  typedef grade Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_subject(flatbuffers::Offset<flatbuffers::String> subject) {
    fbb_.AddOffset(grade::VT_SUBJECT, subject);
  }
  void add_value(float value) {
    fbb_.AddElement<float>(grade::VT_VALUE, value, 0.0f);
  }
  explicit gradeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<grade> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<grade>(end);
    return o;
  }
};

inline flatbuffers::Offset<grade> Creategrade(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> subject = 0,
    float value = 0.0f) {
  gradeBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_subject(subject);
  return builder_.Finish();
}

inline flatbuffers::Offset<grade> CreategradeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *subject = nullptr,
    float value = 0.0f) {
  auto subject__ = subject ? _fbb.CreateString(subject) : 0;
  return fbs::Creategrade(
      _fbb,
      subject__,
      value);
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGE = 4,
    VT_WEIGHT = 6,
    VT_NAME = 8,
    VT_GRADES = 10
  };
  int32_t age() const {
    return GetField<int32_t>(VT_AGE, 0);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fbs::grade>> *grades() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbs::grade>> *>(VT_GRADES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_AGE) &&
           VerifyField<float>(verifier, VT_WEIGHT) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_GRADES) &&
           verifier.VerifyVector(grades()) &&
           verifier.VerifyVectorOfTables(grades()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_age(int32_t age) {
    fbb_.AddElement<int32_t>(Message::VT_AGE, age, 0);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Message::VT_WEIGHT, weight, 0.0f);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Message::VT_NAME, name);
  }
  void add_grades(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbs::grade>>> grades) {
    fbb_.AddOffset(Message::VT_GRADES, grades);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t age = 0,
    float weight = 0.0f,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbs::grade>>> grades = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_grades(grades);
  builder_.add_name(name);
  builder_.add_weight(weight);
  builder_.add_age(age);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t age = 0,
    float weight = 0.0f,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<fbs::grade>> *grades = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto grades__ = grades ? _fbb.CreateVector<flatbuffers::Offset<fbs::grade>>(*grades) : 0;
  return fbs::CreateMessage(
      _fbb,
      age,
      weight,
      name__,
      grades__);
}

inline const fbs::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<fbs::Message>(buf);
}

inline const fbs::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbs::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_FBSSCHEMA_FBS_H_
